m <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
check_model(m, panel = FALSE)
m <- lm(mpg ~ wt + cyl + gear + disp, data = mtcars)
check_model(m)
m <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
check_model(m, panel = FALSE)
m <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200)
check_model(m)
}
m <- stan_glm(mpg ~ wt + gear, data = mtcars, chains = 2, iter = 200)
check_model(m)
check_model(unemployment_model)
#####Unemloyment
unemployment <- readRDS("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/DataViz/Datasets/unemployment.rds")
fmla<-female_unemployment~male_unemployment
unemployment_model<- lm(formula = fmla, data = unemployment)
check_model(unemployment_model)
norm <-   rnorm(150,33,3)
cat("Sample size: ", length(norm), " Sample mean: ", mean(norm), " Sample SD: ", sd(norm))
rbinom(rbinom(100,10,0.05))
rbinom(rbinom(100,size=10,prob=0.05))
rbinom(rbinom(10,size=100,prob=0.05))
(15, lambda = 15,
lower_tail
= FALSE)
ppois(15, lambda = 15,   lower_tail  = FALSE)
ppois(15, lambda = 15, lower_tail  = FALSE)
library(performance)
m<-lm(mpg~hp+cyl, data= mtcars)
m
summary(m)
model_performance(m)
require(pdftools)
require(tidyverse)
require(ggplot2)
# Step2: Download the PDF document and load file.
url <- c("http://www.cicad.oas.org/oid/pubs/JamaicaNationalHouseholdDrugSurvey2017ENG.pdf")
raw_text <- map(url, pdf_text)
require(pdftools)
require(tidyverse)
require(ggplot2)
url <- c("http://www.cicad.oas.org/oid/pubs/JamaicaNationalHouseholdDrugSurvey2017ENG.pdf")
raw_text <- map(url, pdf_text)
raw-text
clean_table1 <- function(raw) {
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
raw <- reduce(raw, c)
table_start <- stringr::str_which(tolower(raw), "alcohol use pattern")
table_end <- stringr::str_which(tolower(raw), "never used")
table_end <- table_end[min(which(table_end > table_start))]
clean_table1 <- function(raw) {
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
raw <- reduce(raw, c)
table_start <- stringr::str_which(tolower(raw), "alcohol use pattern")
table_end <- stringr::str_which(tolower(raw), "never used")
table_end <- table_end[min(which(table_end > table_start))]
#Build the table  and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
#Create a list of column names
colnames(data_table) <- c("x","Alcohol Use Pattern", "Males","Females","Total")
data_table
}
knitr::opts_chunk$set(echo = TRUE)
# Load the required packages and make them available in your current R session
suppressPackageStartupMessages({
library(tidyverse)
library(palmerpenguins)
library(tidymodels)
})
# Take a peek into the data
glimpse(penguins)
# Load the skimr column
library(skimr)
# Select desired columns
penguins_select <- penguins %>%
select(c(bill_length_mm, bill_depth_mm, flipper_length_mm,
body_mass_g, species))
# Do some summary statistics
penguins_select %>%
skim()
penguins_select %>%
filter(if_any(everything(), is.na))
# Drop rows containing missing values
penguins_select <- penguins_select %>%
drop_na()
# Confirm there are no missing values
penguins_select %>%
anyNA()
# Proportion of each species in the data
penguins_select %>%
count(species)
# Load the paletteer package
library(paletteer)
# Pivot data to a long format
penguins_select_long <- penguins_select %>%
pivot_longer(!species, names_to = "predictors", values_to = "values")
# Make box plots
theme_set(theme_light())
penguins_select_long %>%
ggplot(mapping = aes(x = species, y = values, fill = predictors)) +
geom_boxplot() +
facet_wrap(~predictors, scales = "free") +
scale_fill_paletteer_d("nbapalettes::supersonics_holiday") +
theme(legend.position = "none")
# For reproducibility
set.seed(2056)
# Split data 70%-30% into training set and test set
penguins_split <- penguins_select %>%
initial_split(prop = 0.70, strata = species)
# Extract data in each split
penguins_train <- training(penguins_split)
penguins_test <- testing(penguins_split)
# Print the number of observations in each split
cat("Training cases: ", nrow(penguins_train), "\n",
"Test cases: ", nrow(penguins_test), sep = "")
# Specify a multinomial regression via nnet
multireg_spec <- multinom_reg(penalty = 1) %>%
set_engine("nnet") %>%
set_mode("classification")
# Train a multinomial regression model without any preprocessing
set.seed(2056)
multireg_fit <- multireg_spec %>%
fit(species ~ ., data = penguins_train)
# Print the model
multireg_fit
# Make predictions for the test set
penguins_results <- penguins_test %>% select(species) %>%
bind_cols(multireg_fit %>%
predict(new_data = penguins_test)) %>%
bind_cols(multireg_fit %>%
predict(new_data = penguins_test, type = "prob"))
# Print predictions
penguins_results %>%
slice_head(n = 5)
# Confusion matrix
penguins_results %>%
conf_mat(species, .pred_class)
update_geom_defaults(geom = "tile", new = list(color = "black", alpha = 0.7))
# Visualize confusion matrix
penguins_results %>%
conf_mat(species, .pred_class) %>%
autoplot(type = "heatmap")
update_geom_defaults(geom = "tile", new = list(color = "green", alpha = 0.7))
# Visualize confusion matrix
penguins_results %>%
conf_mat(species, .pred_class) %>%
autoplot(type = "heatmap")
# Statistical summaries for the confusion matrix
conf_mat(data = penguins_results, truth = species, estimate = .pred_class) %>%
summary()
# Make an ROC_CURVE
penguins_results %>%
roc_curve(species, c(.pred_Adelie, .pred_Chinstrap, .pred_Gentoo)) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, color = .level)) +
geom_abline(lty = 2, color = "gray80", size = 0.9) +
geom_path(show.legend = T, alpha = 0.6, size = 1.2) +
coord_equal()
# Create a model specification
svm_spec <- svm_rbf(mode = "classification", engine = "kernlab",
cost = tune(), rbf_sigma = tune())
# Create a workflow that encapsulates a recipe and a model
svm_wflow <- recipe(species ~ ., data = penguins_train) %>%
step_normalize(all_numeric_predictors()) %>%
workflow(svm_spec)
# Print out workflow
svm_wflow
set.seed(2056)
# Create a regular grid of six values for each tuning parameter
svm_grid <- grid_regular(parameters(svm_spec), levels = 6)
# Print out some parameters in your grid
svm_grid %>%
slice_head(n = 10)
knitr::opts_chunk$set(echo = TRUE)
# Load the required packages into your current R session
install.packages("janitor")
suppressPackageStartupMessages({
library(tidyverse)
library(tidymodels)
library(here)
library(janitor)
})
# Initialize github repo path
# containing test files used to check your answers
testsFolderPath <- "https://raw.githubusercontent.com/MicrosoftDocs/mslearn-machine-learning-with-r/main/tests/introduction-classification-models/"
# Read the CSV file into a tibble
wine_data <- read_csv(file = "https://raw.githubusercontent.com/MicrosoftDocs/ml-basics/master/challenges/data/wine.csv", show_col_types = FALSE)
# Print the first 10 rows of the data
wine_data %>%
slice_head(n = 10)
# Load the janitor package for cleaning data
library(janitor)
# Clean data a bit
wine_data <- wine_data %>%
# Encode WineVariety as category
mutate(WineVariety= as.factor(WineVariety),
levels= c(0,1,2)) %>%
# Clean column names
clean_names()
# Load the janitor package for cleaning data
library(janitor)
# Clean data a bit
wine_data <- wine_data %>%
# Encode WineVariety as category
mutate(WineVariety= as.factor(WineVariety),
levels= c(0,1,2)) %>%
# Clean column names
clean_names()
library(tidyverse)
library(readxl)
library(janitor)
google_forms_raw <- read_excel("https://docs.google.com/spreadsheets/d/1ZLQ2qaW8Qo04gi1OAmKt1LL6VzOYs9xc-itQkMuFP-8/edit?resourcekey#gid=431436912") %>%
clean_names()
library(tidyverse)
library(readxl)
library(janitor)
library(googlesheets4)
library(tidyverse)
library(readxl)
library(janitor)
library(googlesheets4)
google_forms_raw <- read_sheet("https://docs.google.com/spreadsheets/d/1ZLQ2qaW8Qo04gi1OAmKt1LL6VzOYs9xc-itQkMuFP-8/edit?resourcekey#gid=431436912") %>%
clean_names()
library(tidyverse)
library(readxl)
library(janitor)
library(googlesheets4)
google_forms_raw <- read_sheet("https://docs.google.com/spreadsheets/d/1ZLQ2qaW8Qo04gi1OAmKt1LL6VzOYs9xc-itQkMuFP-8/edit?resourcekey#gid=431436912") %>%
clean_names()
gs4_deauth()
google_forms_raw <- read_sheet("https://docs.google.com/spreadsheets/d/1ZLQ2qaW8Qo04gi1OAmKt1LL6VzOYs9xc-itQkMuFP-8/edit?resourcekey#gid=431436912") %>%
clean_names()
x <- c(1, 2, 3)
x[2]
= 5
x
x <- c("red", "blue", "yellow", "orange", "green", "purple")
y <- x[1:3]
y
x <- c("red", "blue", "yellow", "orange", "green", "purple")
y <- x[2:4]
y
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
summarize(vectors,mean
vectors <- list(
A = c(9, 1, 8, 4, 3),
B = c(7,  3,  4,  4,  1,  1, 10,  8)
)
summarize(vectors,mean)
library(tidyverse)
library(googlesheets4)
library("googledrive")
library(ggthemes)
drive_download(
"https://docs.google.com/spreadsheets/d/1ZLQ2qaW8Qo04gi1OAmKt1LL6VzOYs9xc-itQkMuFP-8/edit?resourcekey#gid=431436912",
path = "Survey.csv",
overwrite = TRUE)
WEE_COP<-read.csv("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Documents/Survey.csv")
glimpse(WEE_COP)
Themes<- WEE_COP|>
select(Name.of.your.organization., Who.is.the.preferred.contact.person.for.the.WEE.CoP.from.your.organization..Name.and.Email.Address., In.what.Kenyan.counties.or.other.locations.do.you.work.,
Which.of.the.following.themes.most.relate.to.your.work...Check.all.that.apply.)|>
rename(Organization= Name.of.your.organization.,
contact_person=Who.is.the.preferred.contact.person.for.the.WEE.CoP.from.your.organization..Name.and.Email.Address.,
Thematic_area=Which.of.the.following.themes.most.relate.to.your.work...Check.all.that.apply.,
Counties=In.what.Kenyan.counties.or.other.locations.do.you.work.)
aa<- Themes|>
data.frame(do.call("rbind",strsplit(as.character(Themes$Thematic_area),",", fixed =TRUE)))
Clean_Themes<- pivot_longer(aa, X1:X8,names_to = "ThematicAreas", values_to = "ThematicArea2")|>
select(-ThematicAreas)|>
filter(ThematicArea2!=" Economic Justice Advocacy for small scale cross-border traders in Busia (Kenya/Uganda) and Namanga (Kenya/Tanzania) border",
ThematicArea2!="TEST")
glimpse(Clean_Themes)
aa<- Clean_Themes|>
ggplot(aes(ThematicArea2))+
geom_bar()+
ggtitle("Distribution of Thematic areas for WEE COP Members") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
coord_flip()+
theme_economist()
aa
bb<- Clean_Themes|>
ggplot(aes(Organization))+
geom_col(stat="identity", width=c2)+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~ThematicArea2)+
coord_flip()+
theme_economist()
bb
bb<- Clean_Themes|>
ggplot(aes(Organization))+
geom_col(stat="identity", width=c2)+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~ThematicArea2)+
coord_flip()+
theme_economist()
bb<- Clean_Themes|>
ggplot(aes(Organization))+
geom_col(stat="identity")+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~ThematicArea2)+
coord_flip()+
theme_economist()
bb
bb<- Clean_Themes|>
ggplot(aes(Organization))+
geom_col()+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~ThematicArea2)+
coord_flip()+
theme_economist()
bb
bb<- Clean_Themes|>
ggplot(aes(Organization))+
geom_bar()+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~ThematicArea2)+
coord_flip()+
theme_economist()
bb
cc<- Clean_Themes|>
select(Organization=c("FSD Kenya", "PARIS21", "Soroptimist International", "African Population and Health Research Center", "Center on Gender Equity and Health at UC San Diego,
"KNBS", "Population Council", "International Development Research Centre", "Collaborative Centre for Gender and Development"))|>
ggplot(aes(ThematicArea2))+
geom_bar()+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~Organization)+
theme(text=element_text(size=14))+
coord_flip()
cc
cc<- Clean_Themes|>
select(Organization=c("FSD Kenya", "PARIS21", "Soroptimist International", "African Population and Health Research Center", "Center on Gender Equity and Health at UC San Diego,
"KNBS", "Population Council", "International Development Research Centre", "Collaborative Centre for Gender and Development"))|>
ggplot(aes(ThematicArea2))+
geom_bar()+
ggtitle("Distribution of Thematic areas for WEE COP Members by Theme") +
ylab("Number of WEE-COP Members") + xlab("Thematic area")+
facet_wrap(~Organization)+
theme(text=element_text(size=14))+
coord_flip()
x<- c(1:50, Yes)
x
x<- c(1:50)
x
x<- rep(Yes,50)
x<- rep("Yes",50)
x
x<- rep('Yes',50)
x
x <- c(-4, 9, 7, -2)
ifelse
(x > 0, "Positive", "Negative")
numbers <- list(
x = c(1, 2, 3),
y = c('one', 'two', 'three'),
z = c('uno', 'dos', 'tres')
)
list(numbers)
numbers <- list(
x = c(1, 2, 3),
y = c('one', 'two', 'three'),
z = c('uno', 'dos', 'tres')
)
print(numbers)
numbers <- list(
x = c(1, 2, 3),
y = c('one', 'two', 'three'),
z = c('uno', 'dos', 'tres')
)
lapply(numbers)
x <-
4
is.na(x)
x <-
NA
is.na(x)
x <-
rep(TRUE,50)
length(x)
x
%>%
mean(
lengths, na.rm=TRUE
)
x <- c(1, 2, 3, 4)
4
<=
x
x <- c(1, 2, 3, 4)
4 <=  x
for(
i>0 & i<11
){
print(i)
}
for(   i<11){
print(i)
}
# Read a CSV file into a tibble
students <- read_csv(file = "https://raw.githubusercontent.com/MicrosoftDocs/ml-basics/master/data/grades.csv")
# Print the first 10 rows of the data
slice_head(students, n = 10)
library(tidyverse)
# Read a CSV file into a tibble
students <- read_csv(file = "https://raw.githubusercontent.com/MicrosoftDocs/ml-basics/master/data/grades.csv")
# Print the first 10 rows of the data
slice_head(students, n = 10)
# Print the first 10 rows of the data
slice_tail(students, n = 10)
# Print the first 10 rows of the data
slice_tail(students, n = 100)
# Print the first 10 rows of the data
slice_tail(students, n = 50)
complete <- function(directory, id = 1:332)
{
#Create a list of file
files_full <- list.files(directory, full.names= TRUE)
# Create empty data frame
dat <- data.frame()
for (i in id)
{
# Read files
temp <- read.csv(files_full[i])
# nobs are sum of all complete cases
nobs <-sum(complete.cases(temp))
# Enamurtates complete cass by index
dat <-rbind(dat, data.frame(i, nobs))
}
colnames(dat) <- c("id", "nobs")
return(dat)
}
pollutantmean <- function(directory, pollutant, id = 1:332)
{
#create a list of files
files_full <- list.files(directory, full.names = TRUE)
# create an empty data frame
dat <- data.frame()
for (i in id)
{
#add files to main data
dat <- rbind(dat, read.csv(files_full[i]))
}
#Calulate mean
mean_data <- mean(dat[, pollutant], na.rm = TRUE)
return(mean_data)
}
shiny::runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Bomet')
runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Bomet')
runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kericho')
fields <- c("name","age","height","weight")
library(shiny)
fields <- c("name","age","height","weight")
ui <- fluidPage(
# Application title
titlePanel("Health card"),
# Sidebar with reactive inputs
sidebarLayout(
sidebarPanel(
textInput("name","Your Name"),
selectInput("age","Age bracket",c("18-25","25-45","above 45")),
textInput("weight","Please enter your weight in kg"),
textInput("height","Please enter your height in cm"),
actionButton("save","Add")
),
# a table of reactive outputs
mainPanel(
mainPanel(
DT::dataTableOutput("responses", width = 500), tags$hr()
)
)
)
)
runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich')
runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich')
runApp('C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Bomet')
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
setwd("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich")
gf <- read_csv ("Alupe.csv")
setwd("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich")
library(tidyverse)
setwd("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich")
gf <- read_csv ("Alupe.csv")
library(readr)
Alupe <- read_csv("Alupe.csv")
View(Alupe)
Alupe <- read_csv("Alupe.csv")
ggplot(Alupe, aes(Age, Gender))+
geom_col()
ggplot(Alupe, aes(Age, Gender))+
geom_col()+ facet_wrap(~Religion)
ggplot(Alupe, aes(Age, Gender, fill= Education))+
geom_col()+ facet_wrap(~Religion)
setwd("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich")
Alupe <- read_csv("C:/Users/Erick Yegon/Dropbox/My PC (DESKTOP-1I4SCDT)/Desktop/Kaptich/Alupe.csv")
summary(Alupe)
runApp()
